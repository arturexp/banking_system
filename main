from random import randint
import sqlite3

with sqlite3.connect('card.s3db') as conn:
    cur = conn.cursor()

    cur.execute('''CREATE TABLE IF NOT EXISTS card (
                id INTEGER,
                number TEXT,
                pin TEXT,
                balance INTEGER DEFAULT 0
                );''')
    conn.commit()

users = {}
balance = 0
card_number = 0


def main_menu():
    print('1. Create an account\n2. Log into account\n0. Exit')
    main_menu_choice = int(input())
    return main_menu_choice


def log_in():
    global balance, card_number
    print('Enter your card number:')
    user_login = input()
    print('Enter your PIN:')
    user_pin = input()
    with sqlite3.connect('card.s3db') as conn:
        cur = conn.cursor()
        cur.execute(f'SELECT number, pin, balance FROM card WHERE number = {user_login}')
        result = cur.fetchone()
    if len(user_login) != 16 or len(user_pin) != 4 or result is None or user_pin != result[1]:
        print('Wrong card number or PIN!\n')
        return False
    else:
        print('You have successfully logged in!\n')
        card_number = user_login
        balance = result[2]
        return True


def create_card():
    global card_number
    iin = '400000'
    acc_id = str(randint(100000000, 999999999))
    number = iin + acc_id
    checksum = list(number)
    len_ = len(checksum)
    for x in range(len_):
        checksum[x] = int(checksum[x])
    for i in range(0, len_, 2):
        checksum[i] = checksum[i] * 2
        if int(checksum[i]) > 9:
            checksum[i] = checksum[i] - 9
    checksum = sum(checksum)
    checksum = (10 - checksum) % 10
    card_number = iin + acc_id + str(checksum)

    card_pin = str(randint(1000, 9999))
    with sqlite3.connect('card.s3db') as conn:
        cur = conn.cursor()

        cur.execute(f"INSERT INTO card ('number', 'pin') VALUES ({card_number}, {card_pin});")
        conn.commit()

    print('Your card has been created')
    print(f'Your card number:\n{card_number}')
    print(f'Your card PIN:\n{card_pin}\n')


def check_card(num):
    num1 = num[:-1]
    num2 = num[-1]

    num1 = list(num1)
    num_len = len(num1)
    for x in range(num_len):
        num1[x] = int(num1[x])
    for i in range(0, num_len, 2):
        num1[i] *= 2
        if num1[i] > 9:
            num1[i] -= 9
    num1 = sum(num1) + int(num2)
    if int(num1) % 10 == 0:
        return True
    else:
        return False


def transfer(my_card):
    print('Transfer')
    tr_cn = input('Enter card number:\n')

    if check_card(tr_cn):
        with sqlite3.connect('card.s3db') as con:
            cur = con.cursor()
            cur.execute(f'SELECT number FROM card WHERE number={tr_cn}')
            if cur.fetchone() is None:
                print('Such a card does not exist.\n')
            else:
                money = int(input('Enter how much money you want to transfer:\n'))
                cur.execute(f'SELECT balance FROM card WHERE number={my_card}')
                b = cur.fetchone()
                if b[0] < money:
                    print('Not enough money!\n')
                else:
                    cur.execute(f'UPDATE card SET balance=balance+{money} WHERE number={tr_cn}')
                    cur.execute(f'UPDATE card SET balance=balance-{money} WHERE number={my_card}')
                    con.commit()
    else:
        print('Probably you made a mistake in the card number. Please try again!\n')


def close_acc(c_num):
    with sqlite3.connect('card.s3db') as con:
        cur = con.cursor()
        cur.execute(f'DELETE FROM card WHERE number={c_num}')
        con.commit()
    print('The account has been closed!\n')


def check_balance(c_n):
    global balance
    with sqlite3.connect('card.s3db') as conn:
        cur1 = conn.cursor()
        cur1.execute(f'SELECT balance FROM card WHERE number = {c_n}')
        balance = cur1.fetchone()
        print(f'Balance: {balance[0]}\n')


def add_income(c_n):
    income = int(input('Enter income:\n'))
    global balance
    with sqlite3.connect('card.s3db') as conn:
        cur1 = conn.cursor()
        cur1.execute(f'UPDATE card SET balance=balance+{income} WHERE number={c_n}')
        conn.commit()


def account_menu():
    while True:
        print('1. Balance \n2. Add income \n3. Do transfer \n4. Close account \n5. Log out \n0. Exit')
        account_menu_choice = int(input())

        if account_menu_choice == 1:
            check_balance(card_number)
            continue
        elif account_menu_choice == 2:
            add_income(card_number)
            continue
        elif account_menu_choice == 3:
            transfer(card_number)
            continue
        elif account_menu_choice == 4:
            close_acc(card_number)
            break
        elif account_menu_choice == 5:
            break
        elif account_menu_choice == 0:
            print('Bye!')
            quit()


def main():
    while True:
        main_menu_choice = main_menu()
        if main_menu_choice == 1:
            create_card()
        elif main_menu_choice == 2:
            if log_in():
                account_menu()
            else:
                continue
        elif main_menu_choice == 0:
            print('Bye!')
            quit()


main()
